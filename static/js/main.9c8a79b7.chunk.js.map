{"version":3,"sources":["context/GameContext.js","componentes/CardComponent.js","componentes/cards.js","componentes/players.js","pages/Lobby.js","pages/Home.js","pages/Chat.js","serviceWorker.js","index.js"],"names":["gameContext","React","createContext","CardComponent","card","isFaceUp","player","isKnock","pile","useState","isFaceUpState","setIsFaceUpSate","useContext","GameContext","discardPile","setDiscardPile","deck","setDeck","gameState","setGameState","currentCard","setCurrentCard","players","setPlayers","useEffect","checkGinPlayer","calcDeadwood","score","alert","window","location","name","className","onClick","e","preventDefault","hand","push","tmpDiscard","shift","tmpPile","unshift","splice","indexOf","value","faceUpClicked","length","tmpDeck","forEach","c","index","possibleMelds","map","meld","deadwoodCards","suit","theirDeadwood","Math","abs","faceDownClicked","style","backgroundImage","process","toUpperCase","mapToPNG","Card","this","suits","HEARTS","CLUBS","SPADES","DIAMONDS","Player","bestMelds","deadwood","bestMeld","otherCards","melds","cardsInMeld","cardContested","meldValue","meld2","index2","melds2","cardIndex","includes","card2","cardIndex2","highestEffeciency","highestEfficiencyIndex","cardCounts","contestedCards","sum","isInArray","obj","count","intersection","filter","efficiency","max","sortedHand","hearts","diamonds","clubs","spades","sort","card1","i","tmpMeld","j","cards","nextCard","highestValueMeld","possibleMeldsTmp","checkHandForSets","filterMelds","getMelds","isCardInMeld","a1","a2","a","diff","k","discardLength","deckLength","previousHandState","discardCard","deckCard","tmpPile2","highestValCard","cardToDiscardIndex","cardToDiscard","flat","highestVal","Lobby","history","useHistory","playerName","setPlayerName","isFindingGame","setIsFindingGame","onSubmit","sleepInterval","floor","random","setTimeout","findGame","htmlFor","type","id","placeholder","onChange","target","Home","hasDealt","setHasDealt","_setGameState","prevGameState","setPrevGameState","state","dealBtnRef","useRef","undefined","Object","keys","newCard","generateDeck","current","click","opponentTurn","Provider","userPlayer","duplicates","otherTmpDeck","deal","ref","key","gameStateMap","flexGrow","Message","sender","text","timestamp","Date","now","Chat","messages","setMessages","currentMessage","setCurrentMessage","convertToCSV","objArray","array","JSON","parse","str","line","sendChatData","fetch","method","mode","headers","body","stringify","results2send","minute","sec","timer","setInterval","clearInterval","document","getElementById","innerHTML","message","currentMessages","sendMessage","messageChange","disabled","Boolean","hostname","match","App","basename","exact","path","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9c8a79b7.chunk.js","sourcesContent":["import React from 'react'\n\nconst gameContext = React.createContext({})\n\nexport default gameContext","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport GameContext from '../context/GameContext'\nimport '../style/card.css'\n\nconst CardComponent = ({card, isFaceUp, player, isKnock=false, pile}) => {\n\n    const [isFaceUpState, setIsFaceUpSate] = useState(false)\n    const {discardPile, setDiscardPile, deck, setDeck, gameState, setGameState, currentCard, setCurrentCard, players, setPlayers} = useContext(GameContext)\n\n    useEffect(() => {\n        setIsFaceUpSate(isFaceUp)\n    }, [])\n\n    const mapToPNG = card => {\n        let value\n        switch (card.value) {\n            case 1:\n                value = 'A'\n                break;\n\n            case 11:\n                value = 'J'\n                break;\n\n            case 12:\n                value = 'Q'\n                break;\n\n            case 13:\n                value = 'K'\n                break;\n        \n            default:\n                value = card.value\n                break;\n        }\n        return `${value}${card.suit[0].toUpperCase()}.png`\n    }\n\n    const checkGinPlayer = () => {\n        if (players[0].calcDeadwood() == 0) {\n            players[0].score += 25 + players[1].calcDeadwood()\n            \n            //console.log('Player 1 score', players[0].score)\n            //console.log('Player 2 score', players[1].score)\n\n            if (players[0].score >= 100) {\n                alert(`You won by going Gin`)\n                window.location = '/#/'\n            } else {\n                alert(`You went Gin and gained ${25+players[1].calcDeadwood()} points`)\n                window.location = '/#/chat'\n                //console.log('chat')\n            }\n        }\n\n        if (players[1].calcDeadwood() == 0) {\n            //console.log('player 2 score before calc', players[1].score)\n            //console.log('player 1 deadwood', players[0].calcDeadwood())\n            players[1].score += 25 + players[0].calcDeadwood()\n\n            //console.log('Player 1 score', players[0].score)\n            //console.log('Player 2 score', players[1].score)\n\n            if (players[1].score >= 100) {\n                alert(`${players[1].name} went Gin and won`)\n                window.location = '/'\n            } else {\n                alert(`${players[1].name} went Gin and gained ${25+players[0].calcDeadwood()} points`)\n                window.location = '/#/chat'\n            }\n        }\n    }    \n\n    const faceUpClicked = e => {\n        checkGinPlayer()\n\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            players[0].hand.push(card)\n            let tmpDiscard = [...discardPile]\n            // tmpPile.splice(tmpPile.indexOf(card), 1)\n            tmpDiscard.shift()\n            setDiscardPile(tmpDiscard)\n            players[0].calcDeadwood()\n            // checkGinPlayer()\n            setGameState('discard')\n        }\n\n        if (player===players[0] && gameState=='discard') {\n            e.preventDefault()\n\n            if (players[0].calcDeadwood() > 10) {\n                let tmpPile = [...discardPile]\n                tmpPile.unshift(card)\n                setDiscardPile(tmpPile)\n                players[0].hand.splice(players[0].hand.indexOf(card), 1)\n                // checkGinPlayer()\n                setGameState('opponent')\n            } else if (players[0].calcDeadwood() - (card.value<11 ? card.value : 10) === 0) {\n                let tmpPile = [...discardPile]\n                tmpPile.unshift(card)\n                setDiscardPile(tmpPile)\n                players[0].hand.splice(players[0].hand.indexOf(card), 1)\n                checkGinPlayer()\n            } else {\n                //highlight knock and discard piles\n                setGameState('knock-discard')\n                setCurrentCard(card)\n            }\n        }\n\n        if (pile.name=='discard' && gameState=='knock-discard') {\n                let tmpPile = [...discardPile]\n                //console.log('currentCard', currentCard)\n                tmpPile.unshift(currentCard)\n                setDiscardPile(tmpPile)\n                players[0].hand.splice(players[0].hand.indexOf(currentCard), 1)\n                // checkGinPlayer()\n                setGameState('opponent')\n        }\n    }\n\n    const faceDownClicked = e => {\n        checkGinPlayer()\n\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            players[0].hand.push(card)\n            let tmpPile = [...deck]\n            tmpPile.splice(tmpPile.indexOf(card), 1)\n\n            if (deck.length < 1) {\n                let tmpDiscard = [...discardPile]\n                let tmpDeck = tmpDiscard\n                tmpDiscard = [tmpDiscard[0]]\n    \n                tmpDeck.forEach((c, index) => {\n                    if (c == tmpDiscard[0]) {\n                        tmpDeck.splice(index, 1)\n                    }\n                })\n                setDiscardPile(tmpDiscard)\n            }\n\n            setDeck(tmpPile)\n            // checkGinPlayer()\n            setGameState('discard')\n        }\n\n        if (isKnock && gameState=='knock-discard') {\n            players[1].calcDeadwood()\n            //console.log('deadwood before', players[1].deadwoodCards)\n            players[0].possibleMelds.map(meld=> {\n                if (meld.length == 3)\n                {\n                    players[1].deadwoodCards.map((card, index) => {\n                        if (meld[0].value == meld[1].value == card.value)\n                        {\n                            players[1].deadwoodCards.splice(index, 1)\n                            return\n                        }\n                        if ((meld[0].suit == meld[1].suit == card.suit) && ((card.value == meld[0].value-1) || (card.value == meld[2].value+1)))\n                        {\n                            players[1].deadwoodCards.splice(index, 1)\n                            return\n                        }\n                    })\n                }\n            })\n            //console.log('deadwood after', players[1].deadwoodCards)\n\n            let theirDeadwood = 0\n            players[1].deadwoodCards.map(card =>{\n                theirDeadwood += (card.value<11 ? card.value : 10)\n            })\n            players[0].score += theirDeadwood - players[0].calcDeadwood()\n            //console.log('their deadwood', theirDeadwood)\n            //console.log('our score', players[0].score)\n            if (players[0].score >= 100) {\n                alert(`You won by knocking!`)\n                window.location = '/#/'\n            } else {\n                alert(`You knocked and ${theirDeadwood - players[0].calcDeadwood() > -1 ? 'gained' : 'lost'} ${Math.abs(theirDeadwood - players[0].calcDeadwood())} points`)\n                window.location = '/#/chat'\n                //console.log('chat')\n            }\n            // let oldDeadwoodCards= players[0].deadwoodCards\n            // let tmpPile = [...discardPile]\n            // tmpPile.unshift(card)\n            // setDiscardPile(tmpPile)\n            // players[0].hand.splice(players[0].hand.indexOf(card), 1)\n            // players[0].getMelds()\n            // let melds = players[0].bestMelds\n            // players[1].calcDeadwood()\n            // let player2Deadwood = players[1].deadwoodCards\n            // players[0].hand.push(player2Deadwood)\n            // players[0].getMelds()\n            // players[0].calcDeadwood()\n            // let newDeadwoodCards = players[0].deadwoodCards\n            // //console.log('oldDeadwoodCards', oldDeadwoodCards)\n            // //console.log('newDeadwoodCards', newDeadwoodCards)\n            // let trueDeadwoodCards = oldDeadwoodCards.filter(value => newDeadwoodCards.includes(value))\n            // //console.log('trueDeadwoodCards', trueDeadwoodCards)\n        }\n    }\n\n    return (\n        <>\n            {card && (\n                <div className=\"Card\"\n                    onClick={e => isFaceUpState ? faceUpClicked(e) : faceDownClicked(e)}\n                    style={{\n                        backgroundImage: isKnock ? `url('/card-images/knock.png')` : (\n                            `url(\"${process.env.PUBLIC_URL + `/card-images/${isFaceUpState\n                                ? mapToPNG(card) \n                                : 'purple_back.png' }`}\")`\n                        )\n                    }}\n\n                />\n            )}\n        </>\n    )\n}\n\nexport default CardComponent","class Card {\n    suit = null\n    value = 0\n\n    constructor(suit, value) {\n        this.suit = suit\n        this.value = value\n    }\n}\n\nconst suits = {\n    HEARTS: 'hearts',\n    CLUBS: 'clubs',\n    SPADES: 'spades',\n    DIAMONDS: 'diamonds'\n}\n\nexport {Card, suits}","// import React, {useContext} from 'react'\n// import GameContext from '../context/GameContext'\n\nclass Player {\n    name = ''\n    score = 0\n    hand = []\n    possibleMelds = []\n    bestMelds = []\n    discardPile = []\n    deck = []\n    deadwoodCards = []\n    deadwood = 0\n\n    constructor(name) {\n        this.name = name\n    }\n\n    highestValueMeld() {\n        let bestMeldValue = 0\n        let bestMeld = null\n        let otherCards = []\n        this.possibleMelds.map((meld, index, melds) => {\n            let cardsInMeld = meld\n            let cardContested = false\n            let meldValue = 0\n            this.possibleMelds.map((meld2, index2, melds2) => {\n                if (index != index2)\n                {\n                    meld2.map((card, cardIndex) => {\n                        //if card is in cards in meld\n                        otherCards.push(card)\n                        if (cardsInMeld.includes(card)) {\n                            cardContested = true\n                        }\n                    })\n                }\n            })\n            meld.map((card2, cardIndex2) => {\n                if (!otherCards.includes(card2))\n                {\n                    meldValue+= card2.value < 11 ? card2.value : 10\n                }\n            })\n            if(!cardContested)\n            {\n                meldValue += 1000\n            }\n            if (meldValue >= bestMeldValue)\n            {\n                bestMeld = meld\n            }\n        })\n        return bestMeld\n    }\n\n    highestValueMeld2() {\n        let highestEffeciency = 0\n        let highestEfficiencyIndex = 0\n\n        let cardCounts = []\n        let contestedCards = []\n\n        this.possibleMelds.map((meld, index, melds) => {\n            let sum = 0\n            meld.map(card => {\n                \n                let isInArray = false\n                cardCounts.map(obj => {\n                    if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                        isInArray = true\n                    }\n                })\n\n                if (isInArray) {\n                    cardCounts.map(obj => {\n                        if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                            obj.count++\n                        }\n                    })\n                } else {\n                    cardCounts.push({card, count: 1})\n                }\n                sum+= card.value < 11 ? card.value : 10\n            })\n\n            cardCounts.map(obj => {\n                if (obj.count > 1) contestedCards.push(obj.card)\n            })\n\n            let intersection = meld.filter(value => contestedCards.includes(value))\n\n            // //console.log('intersection', intersection)\n\n\n            let efficiency = sum / (intersection.length>0 ? intersection.length : 1)\n            //console.log('meld', meld)\n            // //console.log(efficiency, contestedCards, meld)\n            // //console.log({efficiency, highestEffeciency})\n            if (efficiency > highestEffeciency) {\n                highestEffeciency = efficiency\n                highestEfficiencyIndex = index\n            } else if (efficiency == highestEffeciency) {\n                //TODO: the problem is here\n                this.bestMelds.push(meld)\n                // this.possibleMelds.splice(index, 1)\n            }\n        })\n\n        let bestMeld = this.possibleMelds[highestEfficiencyIndex]\n        return bestMeld\n    }\n\n    checkHandForSets(max=3) {\n        this.possibleMelds = []\n        let sortedHand = [...this.hand]\n\n        let hearts = sortedHand.filter(card => card.suit == 'hearts')\n        let diamonds = sortedHand.filter(card => card.suit == 'diamonds')\n        let clubs = sortedHand.filter(card => card.suit == 'clubs')\n        let spades = sortedHand.filter(card => card.suit == 'spades')\n\n        hearts.sort((card1, card2) => card1.value - card2.value)\n        diamonds.sort((card1, card2) => card1.value - card2.value)\n        clubs.sort((card1, card2) => card1.value - card2.value)\n        spades.sort((card1, card2) => card1.value - card2.value)\n\n        sortedHand = [...hearts, ...diamonds, ...clubs, ...spades]\n\n        for (let i=1; i<14; i++) {\n            let tmpMeld = []\n            let j = 0\n            this.hand.map(card => {\n                if (card.value == i) {\n                    tmpMeld.push(card)\n                    j++\n                }\n            })\n            if (j>=max) {\n                this.possibleMelds.push(tmpMeld)\n            }\n        }\n\n        let j = 0\n        let tmpMeld = []\n        sortedHand.map((card, index, cards) => {\n            if (index != sortedHand.length-1) {\n                let nextCard = cards[index+1]\n                if (nextCard.value == card.value + 1 && nextCard.suit == card.suit) {\n                    j++\n                    tmpMeld.push(card)\n                    if (index == sortedHand.length-2 && j>=3) {\n                        tmpMeld.push(nextCard)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                } else {\n                    if (j>=max) {\n                        tmpMeld.push(card)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                    j = 0\n                    tmpMeld = []\n                }\n            }\n\n        })\n    }\n\n    filterMelds() {\n        let bestMeld = this.highestValueMeld()\n        this.bestMelds.push(bestMeld)\n\n        let possibleMeldsTmp = [...this.possibleMelds]\n\n        //console.log('possible melds', this.possibleMelds)\n\n        possibleMeldsTmp.map((meld, index) => {\n            bestMeld.map(card => {\n                if(meld.includes(card)) {\n                    possibleMeldsTmp.splice(index, 1)\n                    //console.log('FILTER', {meld, bestMelds: this.bestMelds})\n                }\n            })\n\n        })\n\n        \n        this.possibleMelds = possibleMeldsTmp\n        //console.log('post purge', this.possibleMelds)\n    }\n\n    getMelds() {\n        this.bestMelds = []\n        this.checkHandForSets()\n        while (this.possibleMelds.length > 0) {\n            this.filterMelds()\n        }\n    }\n\n    calcDeadwood() {\n        this.deadwoodCards = []\n        this.getMelds()\n        let value = 0\n\n        this.hand.map(card => {\n            let isCardInMeld = false\n            this.bestMelds.map(meld => {\n                if (meld.includes(card)) {\n                    isCardInMeld = true\n                }\n            })\n            if (!isCardInMeld) {\n                value+= card.value<11 ? card.value : 10\n                this.deadwoodCards.push(card)\n            }\n        })\n        this.deadwood = value\n        return value\n    }\n\n\n    arrDiff(a1, a2) {\n\n        var a = [], diff = [];\n    \n        for (var i = 0; i < a1.length; i++) {\n            a[a1[i]] = true;\n        }\n    \n        for (var i = 0; i < a2.length; i++) {\n            if (a[a2[i]]) {\n                delete a[a2[i]];\n            } else {\n                a[a2[i]] = true;\n            }\n        }\n    \n        for (var k in a) {\n            diff.push(k);\n        }\n    \n        return diff;\n    }\n\n    opponentTurn() {\n        this.getMelds()\n\n        if (this.calcDeadwood() == 0) {\n            //\n        } else {\n            this.checkHandForSets(2)\n\n            let discardLength, deckLength = 0\n\n            // discard pile\n            let previousHandState = [...this.hand]\n            let discardCard = this.discardPile[0]\n            this.hand.push(discardCard)\n            let tmpPile = [...this.discardPile]\n            tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n            this.getMelds()\n            discardLength = this.possibleMelds.length\n            this.hand = [...previousHandState]\n\n            // deck pile\n            let deckCard = this.deck[0]\n            this.hand.push(deckCard)\n            let tmpPile2 = [...this.deck]\n            tmpPile2.splice(tmpPile2.indexOf(deckCard), 1)\n            this.getMelds()\n            deckLength = this.possibleMelds.length\n            this.hand = [...previousHandState]\n\n            if (discardLength > deckLength) {\n                let discardCard = this.discardPile[0]\n                this.hand.push(discardCard)\n                let tmpPile = [...this.discardPile]\n                tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                this.discardPile = [...tmpPile]\n            } else if (deckLength > discardLength) {\n                let deckCard = this.deck[0]\n                this.hand.push(deckCard)\n                let tmpPile2 = [...this.deck]\n                tmpPile2.splice(tmpPile2.indexOf(deckCard), 1)\n                this.deck = [...tmpPile2]\n            } else {\n                //same\n                if (this.deck[0].value > this.discardPile[0].value) {\n                    let discardCard = this.discardPile[0]\n                    this.hand.push(discardCard)\n                    let tmpPile = [...this.discardPile]\n                    tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                    this.discardPile = [...tmpPile]\n                } else {\n                    let deckCard = this.deck[0]\n                    this.hand.push(deckCard)\n                    let tmpPile2 = [...this.deck]\n                    tmpPile2.splice(tmpPile2.indexOf(deckCard), 1)\n                    this.deck = [...tmpPile2]\n                }\n            }\n\n            this.getMelds()\n            let deadwood = [...this.hand].filter(card => !this.possibleMelds.flat().includes(card))\n            let highestVal = 0\n            let highestValCard\n            deadwood.forEach(card => {\n                if (card.value > highestVal) {\n                    highestVal = card.value\n                    highestValCard = card\n                }\n            })\n\n            let cardToDiscardIndex\n            let cardToDiscard\n            this.hand.forEach((card, index) => {\n                if (card.value == highestValCard.value && card.suit == highestValCard.suit) {\n                    cardToDiscardIndex = index\n                    cardToDiscard = card\n                }\n            })\n\n            this.discardPile.unshift(cardToDiscard)\n            this.hand.splice(cardToDiscardIndex, 1)\n\n        }\n        \n        return 'draw'\n    }\n}\n\nexport default Player","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/lobby.css'\n\nlet players = []\n\nconst Lobby = () => {\n    const history = useHistory()\n\n    const {playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame} = useContext(GameContext)\n\n    const findGame = e => {\n        e.preventDefault()\n        setPlayerName(playerName)\n        setPlayers([\n            new Player(playerName),\n            new Player('Player 2')\n        ])\n        setIsFindingGame(true)\n\n        const sleepInterval = Math.floor(Math.random() * 1)*1000\n        setTimeout(() => {\n            history.push(\"/chat\")\n        }, sleepInterval)\n    }\n\n    return (\n        <div className=\"Lobby\">\n            <h1>Online Gin-Rummy</h1>\n\n            \n            {isFindingGame ? (\n                <h2 className=\"loading\">Searching...</h2>\n            ) : (\n                <form onSubmit={e => findGame(e)} className=\"nameForm\">\n                    <label htmlFor=\"name\">Enter your name</label>\n                    <input type=\"text\" name=\"name\" id=\"nameField\" placeholder=\"Name\" value={playerName} onChange={e => {setPlayerName(e.target.value)}}/>\n                    <input type=\"submit\" value=\"Find Game\"/>\n                </form>\n            )}\n\n        </div>\n    )\n}\n\nexport default Lobby","import React, {useEffect, useState, useContext, useRef} from 'react'\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/home.css'\nimport Lobby from './Lobby'\n\nconst Home = () => {\n    const [deck, setDeck] = useState([])\n    const [discardPile, setDiscardPile] = useState([])\n    const [hasDealt, setHasDealt] = useState(false)\n    const {gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName, players, setPlayers} = useContext(GameContext)\n    \n    const [currentCard, setCurrentCard] = useState()\n\n    const setGameState = state => {\n        setPrevGameState(gameState)\n        _setGameState(state)\n    }\n\n    const dealBtnRef = useRef();\n\n    const gameStateMap = state => {\n        switch (state) {\n            case 'draw':\n                return 'Draw Card'\n                break;\n\n            case 'discard':\n                return 'Discard'\n                break;\n\n            case 'opponent':\n                return `${players[1].name}'s turn`\n                break;\n        \n            default:\n                return state\n                break;\n        }\n    }\n\n    const generateDeck = () => {\n        let cards = []\n        Object.keys(suits).map(suit => {\n            for (let value=1; value<14; value++) {\n                let newCard = new Card(suit, value)\n                cards.push(newCard)\n            }\n        })\n        setDeck(cards)\n    }\n\n    const deal = () => {\n        let duplicates = true\n        while (duplicates) {\n            let otherTmpDeck = [...deck]\n\n            for (let i=0; i<20; i++) {\n                let tmpDeck = [...otherTmpDeck]\n                let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n                while (cardIndex == -1) {\n                    cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n                }\n                let card = tmpDeck[cardIndex]\n                players[(i%2)].hand.push(card)\n                tmpDeck.splice(cardIndex, 1)\n                otherTmpDeck = [...tmpDeck]\n            }\n\n            setDeck(otherTmpDeck.sort(() => .5 - Math.random()))\n\n            let tmpDeck = [...otherTmpDeck]\n            let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            while (cardIndex == -1) {\n                cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            }\n            setDiscardPile([tmpDeck[cardIndex]])\n            tmpDeck.splice(cardIndex, 1)\n            otherTmpDeck = [...tmpDeck]\n\n            setDeck(otherTmpDeck.sort(() => .5 - Math.random()))\n\n            duplicates = false\n\n            if (otherTmpDeck.filter(card => discardPile.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (otherTmpDeck.filter(card => players[0].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (otherTmpDeck.filter(card => players[1].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (players[0].hand.filter(card => players[1].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (discardPile.filter(card => players[0].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n            if (discardPile.filter(card => players[1].hand.includes(card)).length >= 1) {\n                duplicates = true\n            }\n\n        }\n\n\n        \n        setGameState('draw')        \n    }\n\n    useEffect(() => {\n        if (players[1] !== undefined) {\n            players.forEach(player => {\n                player.hand = []\n            })\n        } else {\n            window.location = \"/\"\n        }\n\n        generateDeck()\n\n        setTimeout(() => {\n            if (dealBtnRef) {\n                dealBtnRef.current.click()\n            }\n        }, 100)\n\n    }, [])\n\n\n    useEffect(() => {\n        // let i = 0\n        // while (gameState == 'opponent' && i<2) {\n        //     setTimeout(//console.log('opponent'), 1000)\n        //     i++\n        // }\n\n        // //console.log('deck', deck)\n        //console.log('discardPile', discardPile)\n        // //console.log('player1', players[0].hand)\n        // //console.log('player2', players[1].hand)\n\n\n        if (players !== []) {\n            //console.log('player 1 deadwood', players[0].calcDeadwood())\n            //console.log('player 2 deadwood', players[1].calcDeadwood())\n            //console.log('player 1 possible melds', players[0].possibleMelds)\n            //console.log('player 1 best melds', players[0].bestMelds)\n            //console.log('player 2 possible melds', players[1].possibleMelds)\n            //console.log('player 2 best melds', players[1].bestMelds)\n        }\n\n\n        if (prevGameState == 'opponent') {\n            setDeck([...players[1].deck])\n            setDiscardPile([...players[1].discardPile])\n\n            //console.log('setDeck', deck)\n            //console.log('setDIscard', discardPile)\n        }\n\n        if (gameState == 'opponent') {\n            setTimeout(() => {\n                setGameState(\n                    players[1].opponentTurn()\n                )\n            }, Math.floor(Math.random() * 3000) + 1000)\n        }\n    }, [gameState])\n\n    // useEffect(() => {\n    //     //console.log('rerender')\n    // }, [deck])\n\n    useEffect(() => {\n        players.forEach(player => {\n            player.discardPile = [...discardPile]\n            player.deck = [...deck]\n        })\n    }, [discardPile, deck])\n\n    useEffect(() => {\n        //run out of cards in discrad pile\n        if (deck.length < 1 && gameState=='opponent') {\n            //console.log('prevGameSTate', prevGameState)\n            let tmpDiscard = [...discardPile]\n            let tmpDeck = tmpDiscard\n            tmpDiscard = [tmpDiscard[0]]\n\n            tmpDeck.forEach((c, index) => {\n                if (c == tmpDiscard[0]) {\n                    tmpDeck.splice(index, 1)\n                }\n            })\n\n            setDeck(tmpDeck)\n            setDiscardPile(tmpDiscard)\n        }\n    }, [deck, discardPile])\n\n    // useEffect(() => {\n    //     if (players[1].calcDeadwood == 0) {\n    //         players[1].score += 25 + players[0].calcDeadwood()\n\n    //         if (players[1].score >= 100) {\n    //             alert('You lost :(')\n    //             window.location = '/'\n    //         } else {\n    //             window.location = '/chat'\n    //         }\n    //     }\n    // }, [gameState])\n\n    return (\n        <GameContext.Provider value={{discardPile, setDiscardPile, deck, setDeck, userPlayer: players[0], gameState, setGameState, currentCard, setCurrentCard, players, setPlayers}}>\n            <div className=\"Home\">\n                {!hasDealt && (\n                    <button onClick={e => {\n                        e.preventDefault()\n                        setHasDealt(true)\n                        deal()\n                    }} id=\"dealBtn\" ref={dealBtnRef}>Loading</button>\n                )}\n\n                {players[1] && (\n                    <h2>{players[1].name} Score: {players[1].score}</h2>\n                )}\n\n                <div className=\"cardList\">\n                    {players[1] && players[1].hand.map((card, key) => {\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        return (<CardComponent card={card} isFaceUp={false} player={players[1]} pile={{name: 'opponentHand', ref: players[1].hand}}/>)\n                    })}\n                </div>\n\n                <br/>\n                \n                <div className={`middleDeck ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n\n                    <div className=\"cardWrapper\">\n                        {/* <img className=\"Card\" src={process.env.PUBLIC_URL + \"/card-images/knock.png\"} isKnock={true}/> */}\n                        <CardComponent card={new Card('hearts', null)} isFaceUp={false} player={null} isKnock={true}/>\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        <CardComponent card={deck[0]} isFaceUp={false} player={null} pile={{name: 'deck', ref: deck}}/>\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        <CardComponent card={discardPile[0]} isFaceUp={true} player={null} pile={{name: 'discard', ref: discardPile}}/>\n                    </div>\n                </div>\n\n                <br/>\n\n                <div className={`cardList ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n                    {players[0] && players[0].hand.map((card, key) => {\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        return (<CardComponent card={card} isFaceUp={true} player={players[0]} pile={{name: 'hand', ref: players[0].hand}}/>)\n                    })}\n                </div>\n\n                <h2 className=\"gameState\">{gameState ? gameStateMap(gameState) : ''}</h2>\n\n                {players[0] && (\n                    <div className=\"player1Score\">\n                        <h2>{players[0].name} Score: {players[0].score}</h2>\n                        <div style={{flexGrow: 1}}/>\n                        <h2>Deadwood: {players[0].calcDeadwood()}/10</h2>\n                    </div>\n                )}\n\n            </div>\n        </GameContext.Provider>\n    )\n}\n\nexport default Home","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/chat.css'\n\nclass Message {\n    constructor(sender, score, text) {\n        this.sender = sender\n        this.score = score\n        this.text = text\n        this.timestamp = Date.now()\n    }\n}\n\nconst Chat = () => {\n    const history = useHistory()\n\n    const {playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame} = useContext(GameContext)\n    const [messages, setMessages] = useState([])\n    const [currentMessage, setCurrentMessage] = useState('')\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        if (players[1] === undefined) {\n            window.location = \"/\"\n        }\n    }, [])\n\n    const sendMessage = e => {\n        e.preventDefault()\n        let score = 0\n        if (players!==undefined) {\n            //console.log('players not undefined')\n            if (playerName == players[0].name) {\n                score = players[0].score\n            } else {\n                score = players[1].score\n            }\n        }\n        let message = new Message(playerName, score, currentMessage)\n        setMessages([...messages, message])\n        setCurrentMessage('')\n    }\n\n    const convertToCSV = objArray => {\n        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray\n        var str = 'playerName, score, messageBody, messageTimestamp, playerScore\\r\\n'\n\n        for (var i = 0; i < array.length; i++) {\n            var line = ''\n            for (var index in array[i]) {\n                if (line != '') line += ','\n\n                line += array[i][index]\n            }\n\n            str += line + '\\r\\n'\n        }\n\n        return str\n    }\n\n    useEffect(() => {\n        //console.log(messages, convertToCSV(messages))\n    }, [messages])\n\n    const messageChange = e => {\n        e.preventDefault()\n        setCurrentMessage(e.target.value)\n    }\n\n    const sendChatData = async () => {\n        const url = `http://community.dur.ac.uk/e.c.stanton/studies/GinRummy/ginrummy.php`\n        const rawResponse = await fetch(url, {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({results2send: convertToCSV(messages)})\n    })\n    }\n\n    useEffect(() => {\n        var minute = 2;\n        var sec = 0;\n        let timer = setInterval(() => {\n            if (minute==0 && sec==0) {\n                sendChatData()\n                history.push(\"/play\")\n                clearInterval(timer)\n            } else {\n                document.getElementById(\"timer\").innerHTML = `Round starting in ${minute} minutes and ${sec} seconds`\n                sec--\n                if (sec < 0) {\n                    minute --\n                    sec = 59;\n                }\n\n                if (sec % 10 == 0) {\n                    let score = 0\n                    if (players!==undefined) {\n                        score = players[1].score\n                    }\n                    let message = new Message('Fake User', score, 'Fake user message')\n                    setMessages(currentMessages => [...currentMessages, message])\n                }\n            }\n        }, 1000)\n    }, [])\n\n    return (\n        <GameContext.Provider value={{playerName}}>\n        <div className=\"Chat\">\n            <h1>Online Gin-Rummy</h1>\n            <h2>Chat</h2>\n            <h2 id=\"timer\">...</h2>\n\n            <div className=\"message-area\">\n                <ul>\n                    {messages.map(message => {\n                        return (\n                            <div className={`message ${message.sender===playerName ? 'ownMessage' : ''}`}>\n                                <h3>{message.sender}</h3>\n                                <p>{message.text}</p>\n                            </div>\n                        )\n                    })}\n                </ul>\n                <div className=\"spacer\"></div>\n                <form onSubmit={e => sendMessage(e)}>\n                    <textarea type=\"text\" name=\"message\" id=\"message-box\" placeholder=\"Message\" value={currentMessage} onChange={e => messageChange(e)}/>\n                    <input type=\"submit\" value=\"Send\" disabled={currentMessage===''}/>\n                </form>\n            </div>\n\n        </div>\n        </GameContext.Provider>\n    )\n}\n\nexport default Chat","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, useContext, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './style/index.css';\nimport Header from './componentes/Header'\nimport Home from './pages/Home'\nimport Chat from './pages/Chat'\nimport Lobby from './pages/Lobby'\nimport GameContext from './context/GameContext'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst App = () => {\n  \n  const [gameState, _setGameState] = useState(null)\n  const [prevGameState, setPrevGameState] = useState('')\n  const [playerName, setPlayerName] = useState('Player 1')\n  const [isFindingGame, setIsFindingGame] = useState(false)\n  const [players, setPlayers] = useState([])\n  \n  return (\n    <GameContext.Provider value={{gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName, players, setPlayers, isFindingGame, setIsFindingGame}}>\n      <Router basename=\"/ginrummy-demo\">\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Lobby/>\n              </Route>\n              <Route exact path=\"/chat\">\n                <Chat/>\n              </Route>\n              <Route exact path=\"/play\">\n                <Home/>\n              </Route>\n            </Switch>\n          </div>\n      </Router>\n    </GameContext.Provider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}