{"version":3,"sources":["context/GameContext.js","componentes/CardComponent.js","componentes/cards.js","componentes/players.js","pages/Lobby.js","pages/Home.js","pages/Chat.js","serviceWorker.js","index.js"],"names":["gameContext","React","createContext","CardComponent","card","isFaceUp","player","isKnock","pile","useState","isFaceUpState","setIsFaceUpSate","useContext","GameContext","discardPile","setDiscardPile","deck","setDeck","userPlayer","gameState","setGameState","players","currentCard","setCurrentCard","useEffect","checkGinPlayer","calcDeadwood","score","alert","window","location","className","onClick","e","preventDefault","hand","push","tmpPile","splice","indexOf","unshift","name","console","log","faceUpClicked","faceDownClicked","style","backgroundImage","process","value","suit","toUpperCase","mapToPNG","Card","this","suits","HEARTS","CLUBS","SPADES","DIAMONDS","Player","possibleMelds","bestMelds","highestEffeciency","highestEfficiencyIndex","cardCounts","contestedCards","map","meld","index","melds","sum","isInArray","obj","count","intersection","filter","includes","efficiency","length","max","sortedHand","hearts","diamonds","clubs","spades","sort","card1","card2","i","tmpMeld","j","cards","nextCard","bestMeld","highestValueMeld","possibleMeldsTmp","checkHandForSets","filterMelds","getMelds","isCardInMeld","a1","a2","a","diff","k","discardLength","deckLength","previousHandState","discardCard","deckCard","tmpPile2","highestValCard","cardToDiscardIndex","cardToDiscard","deadwood","flat","highestVal","forEach","Lobby","history","useHistory","playerName","setPlayerName","isFindingGame","setIsFindingGame","onSubmit","sleepInterval","Math","floor","random","setTimeout","findGame","htmlFor","type","id","placeholder","onChange","target","Home","hasDealt","setHasDealt","_setGameState","prevGameState","setPrevGameState","state","dealBtnRef","useRef","Object","keys","newCard","generateDeck","current","click","opponentTurn","Provider","otherTmpDeck","tmpDeck","cardIndex","deal","ref","key","src","alt","gameStateMap","flexGrow","Message","sender","text","timestamp","Date","now","Chat","messages","setMessages","currentMessage","setCurrentMessage","minute","sec","timer","setInterval","clearInterval","document","getElementById","innerHTML","message","currentMessages","sendMessage","messageChange","disabled","Boolean","hostname","match","App","basename","exact","path","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.34a85ecd.chunk.js","sourcesContent":["import React from 'react'\n\nconst gameContext = React.createContext({})\n\nexport default gameContext","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport GameContext from '../context/GameContext'\nimport '../style/card.css'\n\nconst CardComponent = ({card, isFaceUp, player, isKnock=false, pile}) => {\n\n    const [isFaceUpState, setIsFaceUpSate] = useState(false)\n    const {discardPile, setDiscardPile, deck, setDeck, userPlayer, gameState, setGameState, players, currentCard, setCurrentCard} = useContext(GameContext)\n\n    useEffect(() => {\n        setIsFaceUpSate(isFaceUp)\n    }, [])\n\n    const mapToPNG = card => {\n        let value\n        switch (card.value) {\n            case 1:\n                value = 'A'\n                break;\n\n            case 11:\n                value = 'J'\n                break;\n\n            case 12:\n                value = 'Q'\n                break;\n\n            case 13:\n                value = 'K'\n                break;\n        \n            default:\n                value = card.value\n                break;\n        }\n        return `${value}${card.suit[0].toUpperCase()}.png`\n    }\n\n    const checkGinPlayer = () => {\n        if (players[0].calcDeadwood == 0) {\n            players[0].score += 25 + players[1].calcDeadwood()\n\n            if (players[0].score >= 100) {\n                alert('You win!')\n                window.location = '/'\n            } else {\n                window.location = '/chat'\n            }\n        }\n    }    \n\n    const faceUpClicked = e => {\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            userPlayer.hand.push(card)\n            let tmpPile = [...discardPile]\n            tmpPile.splice(tmpPile.indexOf(card), 1)\n            setDiscardPile(tmpPile)\n            setGameState('discard')\n        }\n\n        if (player===userPlayer && gameState=='discard') {\n            e.preventDefault()\n\n            if (userPlayer.calcDeadwood() > 10) {\n                let tmpPile = [...discardPile]\n                tmpPile.unshift(card)\n                setDiscardPile(tmpPile)\n                userPlayer.hand.splice(userPlayer.hand.indexOf(card), 1)\n                checkGinPlayer()\n                setGameState('opponent')\n            } else {\n                //highlight knock and discard piles\n                setGameState('knock-discard')\n                setCurrentCard(card)\n            }\n        }\n\n        if (pile.name=='discard' && gameState=='knock-discard') {\n                let tmpPile = [...discardPile]\n                console.log('currentCard', currentCard)\n                tmpPile.unshift(currentCard)\n                setDiscardPile(tmpPile)\n                userPlayer.hand.splice(userPlayer.hand.indexOf(currentCard), 1)\n                checkGinPlayer()\n                setGameState('opponent')\n        }\n    }\n\n    const faceDownClicked = e => {\n\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            userPlayer.hand.push(card)\n            let tmpPile = [...deck]\n            tmpPile.splice(tmpPile.indexOf(card), 1)\n            setDeck(tmpPile)\n            setGameState('discard')\n        }\n\n        if (isKnock && gameState=='knock-discard') {\n            alert('knock')\n        }\n    }\n\n    return (\n        <>\n            {card && (\n                <div className=\"Card\"\n                    onClick={e => isFaceUpState ? faceUpClicked(e) : faceDownClicked(e)}\n                    style={{\n                        backgroundImage: isKnock ? `url('/card-images/knock.png')` : (\n                            `url(\"${process.env.PUBLIC_URL + `/card-images/${isFaceUpState\n                                ? mapToPNG(card) \n                                : 'blue_back.png'}`}\")`\n                        )\n                    }}\n\n                />\n            )}\n        </>\n    )\n}\n\nexport default CardComponent","class Card {\n    suit = null\n    value = 0\n\n    constructor(suit, value) {\n        this.suit = suit\n        this.value = value\n    }\n}\n\nconst suits = {\n    HEARTS: 'hearts',\n    CLUBS: 'clubs',\n    SPADES: 'spades',\n    DIAMONDS: 'diamonds'\n}\n\nexport {Card, suits}","// import React, {useContext} from 'react'\n// import GameContext from '../context/GameContext'\n\nclass Player {\n    name = ''\n    score = 0\n    hand = []\n    possibleMelds = []\n    bestMelds = []\n    discardPile = []\n    deck = []\n\n    constructor(name) {\n        this.name = name\n    }\n\n    highestValueMeld() {\n        let highestEffeciency = 0\n        let highestEfficiencyIndex = 0\n\n        let cardCounts = []\n        let contestedCards = []\n\n        this.possibleMelds.map((meld, index, melds) => {\n            let sum = 0\n            meld.map(card => {\n                \n                let isInArray = false\n                cardCounts.map(obj => {\n                    if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                        isInArray = true\n                    }\n                })\n\n                if (isInArray) {\n                    cardCounts.map(obj => {\n                        if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                            obj.count++\n                        }\n                    })\n                } else {\n                    cardCounts.push({card, count: 1})\n                }\n                sum+= card.value<11 ? card.value : 10\n            })\n\n            cardCounts.map(obj => {\n                if (obj.count > 1) contestedCards.push(obj.card)\n            })\n\n            let intersection = meld.filter(value => contestedCards.includes(value))\n\n            // console.log('intersection', intersection)\n\n\n            let efficiency = sum / (intersection.length>0 ? intersection.length : 1)\n            // console.log(efficiency, contestedCards, meld)\n            if (efficiency > highestEffeciency) {\n                highestEffeciency = efficiency\n                highestEfficiencyIndex = index\n            }\n        })\n\n        let bestMeld = this.possibleMelds[highestEfficiencyIndex]\n        return bestMeld\n    }\n\n    checkHandForSets(max=3) {\n        this.possibleMelds = []\n        let sortedHand = [...this.hand]\n\n        let hearts = sortedHand.filter(card => card.suit == 'hearts')\n        let diamonds = sortedHand.filter(card => card.suit == 'diamonds')\n        let clubs = sortedHand.filter(card => card.suit == 'clubs')\n        let spades = sortedHand.filter(card => card.suit == 'spades')\n\n        hearts.sort((card1, card2) => card1.value - card2.value)\n        diamonds.sort((card1, card2) => card1.value - card2.value)\n        clubs.sort((card1, card2) => card1.value - card2.value)\n        spades.sort((card1, card2) => card1.value - card2.value)\n\n        sortedHand = [...hearts, ...diamonds, ...clubs, ...spades]\n\n        for (let i=1; i<14; i++) {\n            let tmpMeld = []\n            let j = 0\n            this.hand.map(card => {\n                if (card.value == i) {\n                    tmpMeld.push(card)\n                    j++\n                }\n            })\n            if (j>=max) {\n                this.possibleMelds.push(tmpMeld)\n            }\n        }\n\n        let j = 0\n        let tmpMeld = []\n        sortedHand.map((card, index, cards) => {\n            if (index != sortedHand.length-1) {\n                let nextCard = cards[index+1]\n                if (nextCard.value == card.value + 1 && nextCard.suit == card.suit) {\n                    j++\n                    tmpMeld.push(card)\n                    if (index == sortedHand.length-2 && j>=3) {\n                        tmpMeld.push(nextCard)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                } else {\n                    if (j>=max) {\n                        tmpMeld.push(card)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                    j = 0\n                    tmpMeld = []\n                }\n            }\n\n        })\n    }\n\n    filterMelds() {\n        let bestMeld = this.highestValueMeld()\n        this.bestMelds.push(bestMeld)\n\n        let possibleMeldsTmp = [...this.possibleMelds]\n        possibleMeldsTmp.map((meld, index) => {\n            bestMeld.map(card => {\n                if(meld.includes(card)) {\n                    possibleMeldsTmp.splice(index, 1)\n                }\n            })\n        })\n\n        this.possibleMelds = possibleMeldsTmp\n    }\n\n    getMelds() {\n        this.bestMelds = []\n        this.checkHandForSets()\n        while (this.possibleMelds.length > 0) {\n            this.filterMelds()\n        }\n    }\n\n    calcDeadwood() {\n        this.getMelds()\n        let value = 0\n\n        this.hand.map(card => {\n            let isCardInMeld = false\n            this.bestMelds.map(meld => {\n                if (meld.includes(card)) {\n                    isCardInMeld = true\n                }\n            })\n            if (!isCardInMeld) {\n                value+= card.value<11 ? card.value : 10\n            }\n        })\n        return value\n    }\n\n\n    arrDiff(a1, a2) {\n\n        var a = [], diff = [];\n    \n        for (var i = 0; i < a1.length; i++) {\n            a[a1[i]] = true;\n        }\n    \n        for (var i = 0; i < a2.length; i++) {\n            if (a[a2[i]]) {\n                delete a[a2[i]];\n            } else {\n                a[a2[i]] = true;\n            }\n        }\n    \n        for (var k in a) {\n            diff.push(k);\n        }\n    \n        return diff;\n    }\n\n    opponentTurn() {\n        this.getMelds()\n\n        if (this.calcDeadwood() == 0) {\n            //\n        } else {\n            this.checkHandForSets(2)\n\n            let discardLength, deckLength = 0\n\n            // discard pile\n            let previousHandState = [...this.hand]\n            let discardCard = this.discardPile[0]\n            this.hand.push(discardCard)\n            let tmpPile = [...this.discardPile]\n            tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n            this.getMelds()\n            discardLength = this.possibleMelds.length\n            this.hand = [...previousHandState]\n\n            // deck pile\n            let deckCard = this.deck[0]\n            this.hand.push(deckCard)\n            let tmpPile2 = [...this.deck]\n            tmpPile2.splice(tmpPile.indexOf(deckCard), 1)\n            this.getMelds()\n            deckLength = this.possibleMelds.length\n            this.hand = [...previousHandState]\n\n            if (discardLength > deckLength) {\n                let discardCard = this.discardPile[0]\n                this.hand.push(discardCard)\n                let tmpPile = [...this.discardPile]\n                tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                this.discardPile = [...tmpPile]\n            } else if (deckLength > discardLength) {\n                let deckCard = this.deck[0]\n                this.hand.push(deckCard)\n                let tmpPile2 = [...this.deck]\n                tmpPile2.splice(tmpPile.indexOf(deckCard), 1)\n                this.deck = [...tmpPile2]\n            } else {\n                //same\n                if (this.deck[0].value > this.discardPile[0].value) {\n                    let discardCard = this.discardPile[0]\n                    this.hand.push(discardCard)\n                    let tmpPile = [...this.discardPile]\n                    tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                    this.discardPile = [...tmpPile]\n                } else {\n                    let deckCard = this.deck[0]\n                    this.hand.push(deckCard)\n                    let tmpPile2 = [...this.deck]\n                    tmpPile2.splice(tmpPile.indexOf(deckCard), 1)\n                    this.deck = [...tmpPile2]\n                }\n            }\n\n            this.getMelds()\n            let deadwood = [...this.hand].filter(card => !this.possibleMelds.flat().includes(card))\n            let highestVal = 0\n            let highestValCard\n            deadwood.forEach(card => {\n                if (card.value > highestVal) {\n                    highestVal = card.value\n                    highestValCard = card\n                }\n            })\n\n            let cardToDiscardIndex\n            let cardToDiscard\n            this.hand.forEach((card, index) => {\n                if (card.value == highestValCard.value && card.suit == highestValCard.suit) {\n                    cardToDiscardIndex = index\n                    cardToDiscard = card\n                }\n            })\n\n            this.discardPile.unshift(cardToDiscard)\n            this.hand.splice(cardToDiscardIndex, 1)\n\n        }\n        \n        return 'draw'\n    }\n}\n\nexport default Player","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/lobby.css'\n\nlet players = []\n\nconst Lobby = () => {\n    const history = useHistory()\n\n    const {playerName, setPlayerName, isFindingGame, setIsFindingGame} = useContext(GameContext)\n\n    const findGame = e => {\n        e.preventDefault()\n        setPlayerName(playerName)\n        setIsFindingGame(true)\n\n        const sleepInterval = Math.floor(Math.random() * 1)*1000\n        setTimeout(() => {\n            history.push(\"/chat\")\n        }, sleepInterval)\n    }\n\n    return (\n        <div className=\"Lobby\">\n            <h1>Online Gin-Rummy</h1>\n\n            \n            {isFindingGame ? (\n                <h2 className=\"loading\">Searching...</h2>\n            ) : (\n                <form onSubmit={e => findGame(e)} className=\"nameForm\">\n                    <label htmlFor=\"name\">Enter your name</label>\n                    <input type=\"text\" name=\"name\" id=\"nameField\" placeholder=\"Name\" value={playerName} onChange={e => {setPlayerName(e.target.value)}}/>\n                    <input type=\"submit\" value=\"Find Game\"/>\n                </form>\n            )}\n\n        </div>\n    )\n}\n\nexport default Lobby","import React, {useEffect, useState, useContext, useRef} from 'react'\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/home.css'\nimport Lobby from './Lobby'\n\nlet players = []\n\nconst Home = () => {\n    const [deck, setDeck] = useState([])\n    const [discardPile, setDiscardPile] = useState([])\n    const [hasDealt, setHasDealt] = useState(false)\n    const {gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName} = useContext(GameContext)\n    \n    const [currentCard, setCurrentCard] = useState()\n\n    const setGameState = state => {\n        setPrevGameState(gameState)\n        _setGameState(state)\n    }\n\n    const dealBtnRef = useRef();\n\n    const gameStateMap = state => {\n        switch (state) {\n            case 'draw':\n                return 'Draw Card'\n                break;\n\n            case 'discard':\n                return 'Discard'\n                break;\n\n            case 'opponent':\n                return `${players[1].name}'s turn`\n                break;\n        \n            default:\n                return state\n                break;\n        }\n    }\n\n    const generateDeck = () => {\n        let cards = []\n        Object.keys(suits).map(suit => {\n            for (let value=1; value<14; value++) {\n                let newCard = new Card(suit, value)\n                cards.push(newCard)\n            }\n        })\n        setDeck(cards)\n    }\n\n    const createPlayers = () => {\n        players = [\n            new Player('Player 1'),\n            new Player('Player 2')\n        ]\n    }\n\n    const deal = () => {\n        let otherTmpDeck = [...deck]\n\n        for (let i=0; i<20; i++) {\n            let tmpDeck = [...otherTmpDeck]\n            let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            while (cardIndex == -1) {\n                cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            }\n            let card = tmpDeck[cardIndex]\n            players[(i%2)].hand.push(card)\n            tmpDeck.splice(cardIndex, 1)\n            otherTmpDeck = [...tmpDeck]\n        }\n\n        setDeck(otherTmpDeck.sort(() => .5 - Math.random()))\n\n        let tmpDeck = [...otherTmpDeck]\n        let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n        while (cardIndex == -1) {\n            cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n        }\n        setDiscardPile([tmpDeck[cardIndex]])\n        tmpDeck.splice(cardIndex, 1)\n        otherTmpDeck = [...tmpDeck]\n        \n        setGameState('draw')        \n    }\n\n    useEffect(() => {\n        generateDeck()\n        createPlayers()\n\n        setTimeout(() => {\n            if (dealBtnRef) {\n                dealBtnRef.current.click()\n            }\n        }, 100)\n\n    }, [])\n\n\n    useEffect(() => {\n        // let i = 0\n        // while (gameState == 'opponent' && i<2) {\n        //     setTimeout(console.log('opponent'), 1000)\n        //     i++\n        // }\n\n        if (prevGameState == 'opponent') {\n            setDeck([...players[1].deck])\n            setDiscardPile([...players[1].discardPile])\n        }\n\n        if (gameState == 'opponent') {\n            setTimeout(() => {\n                setGameState(\n                    players[1].opponentTurn()\n                )\n            }, 1000)\n        }\n    }, [gameState])\n\n    // useEffect(() => {\n    //     console.log('rerender')\n    // }, [deck])\n\n    useEffect(() => {\n        players.forEach(player => {\n            player.discardPile = [...discardPile]\n            player.deck = [...deck]\n        })\n    }, [discardPile, deck])\n\n    useEffect(() => {\n        if (players[1].calcDeadwood == 0) {\n            players[1].score += 25 + players[0].calcDeadwood()\n\n            if (players[1].score >= 100) {\n                alert('You lost :(')\n                window.location = '/'\n            } else {\n                window.location = '/chat'\n            }\n        }\n    }, [gameState])\n\n    return (\n        <GameContext.Provider value={{discardPile, setDiscardPile, deck, setDeck, userPlayer: players[0], gameState, setGameState, players, currentCard, setCurrentCard}}>\n            <div className=\"Home\">\n                {!hasDealt && (\n                    <button onClick={e => {\n                        e.preventDefault()\n                        setHasDealt(true)\n                        deal()\n                    }} id=\"dealBtn\" ref={dealBtnRef}>Loading</button>\n                )}\n\n                {players[1] && (\n                    <h2>{players[1].name} Score: {players[1].score}</h2>\n                )}\n\n                <div className=\"cardList\">\n                    {players[1] && players[1].hand.map((card, key) => {\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        return (<CardComponent card={card} isFaceUp={false} player={players[1]} pile={{name: 'opponentHand', ref: players[1].hand}}/>)\n                    })}\n                </div>\n\n                <br/>\n                \n                <div className={`middleDeck ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n\n                    <div className=\"cardWrapper\">\n                        <img className=\"Card\" src={process.env.PUBLIC_URL + \"/card-images/knock.png\"} alt=\"knock\"/>\n                        {/* <CardComponent card={deck[0]} isFaceUp={false} player={null} isKnock={true}/> */}\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        <CardComponent card={deck[0]} isFaceUp={false} player={null} pile={{name: 'deck', ref: deck}}/>\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        {\n                            discardPile.length > 0\n                                ? (<CardComponent card={discardPile[0]} isFaceUp={true} player={null} pile={{name: 'discard', ref: discardPile}}/>)\n                                : <CardComponent card={deck[0]} isFaceUp={true} player={null} pile={{name: 'discard', ref: deck[0]}}/>\n                        }\n                    </div>\n                </div>\n\n                <br/>\n\n                <div className={`cardList ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n                    {players[0] && players[0].hand.map((card, key) => {\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        return (<CardComponent card={card} isFaceUp={true} player={players[0]} pile={{name: 'hand', ref: players[0].hand}}/>)\n                    })}\n                </div>\n\n                <h2 className=\"gameState\">{gameState ? gameStateMap(gameState) : ''}</h2>\n\n                {players[0] && (\n                    <div className=\"player1Score\">\n                        <h2>{players[0].name} Score: {players[0].score}</h2>\n                        <div style={{flexGrow: 1}}/>\n                        <h2>Deadwood: {players[0].calcDeadwood()}/10</h2>\n                    </div>\n                )}\n\n            </div>\n        </GameContext.Provider>\n    )\n}\n\nexport default Home","import React, {useEffect, useState, useContext} from 'react'\nimport { useHistory } from \"react-router-dom\"\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/chat.css'\n\nclass Message {\n    constructor(sender, text) {\n        this.sender = sender\n        this.text = text\n        this.timestamp = Date.now()\n    }\n}\n\nconst Chat = () => {\n    const history = useHistory()\n\n    const {playerName, setPlayerName, isFindingGame, setIsFindingGame} = useContext(GameContext)\n    const [messages, setMessages] = useState([])\n    const [currentMessage, setCurrentMessage] = useState('')\n    const [isLoading, setIsLoading] = useState(true)\n\n    const sendMessage = e => {\n        e.preventDefault()\n        let message = new Message(playerName, currentMessage)\n        setMessages([...messages, message])\n        setCurrentMessage('')\n    }\n\n    useEffect(() => {\n        console.log(messages)\n    }, [messages])\n\n    const messageChange = e => {\n        e.preventDefault()\n        setCurrentMessage(e.target.value)\n    }\n\n    useEffect(() => {\n        var minute = 2;\n        var sec = 0;\n        let timer = setInterval(() => {\n            if (minute==0 && sec==0) {\n                history.push(\"/play\")\n                clearInterval(timer)\n            } else {\n                document.getElementById(\"timer\").innerHTML = `Round starting in ${minute} minutes and ${sec} seconds`\n                sec--\n                if (sec < 0) {\n                    minute --\n                    sec = 59;\n                }\n\n                if (sec % 10 == 0) {\n                    let message = new Message('Fake User', 'Fake user message')\n                    setMessages(currentMessages => [...currentMessages, message])\n                }\n            }\n        }, 1000)\n    }, [])\n\n    return (\n        <GameContext.Provider value={{playerName}}>\n        <div className=\"Chat\">\n            <h1>Online Gin-Rummy</h1>\n            <h2>Chat</h2>\n            <h2 id=\"timer\">...</h2>\n\n            <div className=\"message-area\">\n                <ul>\n                    {messages.map(message => {\n                        return (\n                            <div className={`message ${message.sender===playerName ? 'ownMessage' : ''}`}>\n                                <h3>{message.sender}</h3>\n                                <p>{message.text}</p>\n                            </div>\n                        )\n                    })}\n                </ul>\n                <div className=\"spacer\"></div>\n                <form onSubmit={e => sendMessage(e)}>\n                    <textarea type=\"text\" name=\"message\" id=\"message-box\" placeholder=\"Message\" value={currentMessage} onChange={e => messageChange(e)}/>\n                    <input type=\"submit\" value=\"Send\" disabled={currentMessage===''}/>\n                </form>\n            </div>\n\n        </div>\n        </GameContext.Provider>\n    )\n}\n\nexport default Chat","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, useContext, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './style/index.css';\nimport Header from './componentes/Header'\nimport Home from './pages/Home'\nimport Chat from './pages/Chat'\nimport Lobby from './pages/Lobby'\nimport GameContext from './context/GameContext'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst App = () => {\n  \n  const [gameState, _setGameState] = useState(null)\n  const [prevGameState, setPrevGameState] = useState('')\n  const [playerName, setPlayerName] = useState('Player 1')\n  const [isFindingGame, setIsFindingGame] = useState(false)\n  \n  return (\n    <GameContext.Provider value={{gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName, isFindingGame, setIsFindingGame}}>\n      <Router basename={`/`}>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Lobby/>\n              </Route>\n              <Route exact path=\"/chat\">\n                <Chat/>\n              </Route>\n              <Route exact path=\"/play\">\n                <Home/>\n              </Route>\n            </Switch>\n          </div>\n      </Router>\n    </GameContext.Provider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}