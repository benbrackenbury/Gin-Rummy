{"version":3,"sources":["context/GameContext.js","componentes/CardComponent.js","componentes/cards.js","componentes/players.js","pages/Lobby.js","pages/Home.js","serviceWorker.js","index.js"],"names":["gameContext","React","createContext","CardComponent","card","isFaceUp","player","isKnock","pile","useState","isFaceUpState","setIsFaceUpSate","useContext","GameContext","discardPile","setDiscardPile","deck","setDeck","userPlayer","gameState","setGameState","currentCard","players","setCurrentCard","useEffect","className","onClick","e","preventDefault","hand","push","tmpPile","splice","indexOf","calcDeadwood","unshift","name","console","log","faceUpClicked","alert","faceDownClicked","style","backgroundImage","process","value","suit","toUpperCase","mapToPNG","Card","this","suits","HEARTS","CLUBS","SPADES","DIAMONDS","Player","score","possibleMelds","bestMelds","highestEffeciency","highestEfficiencyIndex","cardCounts","contestedCards","map","meld","index","melds","sum","isInArray","obj","count","intersection","filter","includes","efficiency","length","max","sortedHand","hearts","diamonds","clubs","spades","sort","card1","card2","i","tmpMeld","j","cards","nextCard","bestMeld","highestValueMeld","possibleMeldsTmp","checkHandForSets","filterMelds","getMelds","isCardInMeld","a1","a2","a","diff","k","endRound","discardLength","deckLength","previousHandState","discardCard","deckCard","tmpPile2","highestValCard","cardToDiscardIndex","cardToDiscard","deadwood","flat","highestVal","forEach","Lobby","playerName","setPlayerName","isFindingGame","setIsFindingGame","onSubmit","sleepInterval","Math","floor","random","setTimeout","window","location","findGame","htmlFor","type","id","placeholder","onChange","target","Home","hasDealt","setHasDealt","_setGameState","prevGameState","setPrevGameState","state","Object","keys","newCard","generateDeck","opponentTurn","Provider","otherTmpDeck","tmpDeck","cardIndex","deal","key","src","alt","ref","Boolean","hostname","match","App","exact","path","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.44ee18e7.chunk.js","sourcesContent":["import React from 'react'\n\nconst gameContext = React.createContext({})\n\nexport default gameContext","import React, {useEffect, useState, useContext} from 'react'\nimport GameContext from '../context/GameContext'\nimport '../style/card.css'\n\nconst CardComponent = ({card, isFaceUp, player, isKnock=false, pile}) => {\n\n    const [isFaceUpState, setIsFaceUpSate] = useState(false)\n    const {discardPile, setDiscardPile, deck, setDeck, userPlayer, gameState, setGameState, players, currentCard, setCurrentCard} = useContext(GameContext)\n\n    useEffect(() => {\n        setIsFaceUpSate(isFaceUp)\n    }, [])\n\n    const mapToPNG = card => {\n        let value\n        switch (card.value) {\n            case 1:\n                value = 'A'\n                break;\n\n            case 11:\n                value = 'J'\n                break;\n\n            case 12:\n                value = 'Q'\n                break;\n\n            case 13:\n                value = 'K'\n                break;\n        \n            default:\n                value = card.value\n                break;\n        }\n        return `${value}${card.suit[0].toUpperCase()}.png`\n    }\n\n    const faceUpClicked = e => {\n\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            userPlayer.hand.push(card)\n            let tmpPile = [...discardPile]\n            tmpPile.splice(tmpPile.indexOf(card), 1)\n            setDiscardPile(tmpPile)\n            setGameState('discard')\n        }\n\n        if (player===userPlayer && gameState=='discard') {\n            e.preventDefault()\n\n            if (userPlayer.calcDeadwood() > 10) {\n                let tmpPile = [...discardPile]\n                tmpPile.unshift(card)\n                setDiscardPile(tmpPile)\n                userPlayer.hand.splice(userPlayer.hand.indexOf(card), 1)\n                setGameState('opponent')\n            } else {\n                //highlight knock and discard piles\n                setGameState('knock-discard')\n                setCurrentCard(card)\n            }\n        }\n\n        if (pile.name=='discard' && gameState=='knock-discard') {\n                let tmpPile = [...discardPile]\n                console.log('currentCard', currentCard)\n                tmpPile.unshift(currentCard)\n                setDiscardPile(tmpPile)\n                userPlayer.hand.splice(userPlayer.hand.indexOf(currentCard), 1)\n                setGameState('opponent')\n        }\n    }\n\n    const faceDownClicked = e => {\n\n        if (player==null && gameState=='draw') {\n            e.preventDefault()\n            userPlayer.hand.push(card)\n            let tmpPile = [...deck]\n            tmpPile.splice(tmpPile.indexOf(card), 1)\n            setDeck(tmpPile)\n            setGameState('discard')\n        }\n\n        if (isKnock && gameState=='knock-discard') {\n            alert('knock')\n        }\n    }\n\n    return (\n        <>\n            {card && (\n                <div className=\"Card\"\n                    onClick={e => isFaceUpState ? faceUpClicked(e) : faceDownClicked(e)}\n                    style={{\n                        backgroundImage: isKnock ? `url('/card-images/knock.png')` : (\n                            `url(\"${process.env.PUBLIC_URL + `/card-images/${isFaceUpState\n                                ? mapToPNG(card) \n                                : 'blue_back.png'}`}\")`\n                        )\n                    }}\n\n                />\n            )}\n        </>\n    )\n}\n\nexport default CardComponent","class Card {\n    suit = null\n    value = 0\n\n    constructor(suit, value) {\n        this.suit = suit\n        this.value = value\n    }\n}\n\nconst suits = {\n    HEARTS: 'hearts',\n    CLUBS: 'clubs',\n    SPADES: 'spades',\n    DIAMONDS: 'diamonds'\n}\n\nexport {Card, suits}","// import React, {useContext} from 'react'\n// import GameContext from '../context/GameContext'\n\nclass Player {\n    name = ''\n    score = 0\n    hand = []\n    possibleMelds = []\n    bestMelds = []\n    discardPile = []\n    deck = []\n\n    constructor(name) {\n        this.name = name\n    }\n\n    highestValueMeld() {\n        let highestEffeciency = 0\n        let highestEfficiencyIndex = 0\n\n        let cardCounts = []\n        let contestedCards = []\n\n        this.possibleMelds.map((meld, index, melds) => {\n            let sum = 0\n            meld.map(card => {\n                \n                let isInArray = false\n                cardCounts.map(obj => {\n                    if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                        isInArray = true\n                    }\n                })\n\n                if (isInArray) {\n                    cardCounts.map(obj => {\n                        if (obj.card.value == card.value && obj.card.suit == card.suit) {\n                            obj.count++\n                        }\n                    })\n                } else {\n                    cardCounts.push({card, count: 1})\n                }\n                sum+= card.value<11 ? card.value : 10\n            })\n\n            cardCounts.map(obj => {\n                if (obj.count > 1) contestedCards.push(obj.card)\n            })\n\n            let intersection = meld.filter(value => contestedCards.includes(value))\n\n            // console.log('intersection', intersection)\n\n\n            let efficiency = sum / (intersection.length>0 ? intersection.length : 1)\n            // console.log(efficiency, contestedCards, meld)\n            if (efficiency > highestEffeciency) {\n                highestEffeciency = efficiency\n                highestEfficiencyIndex = index\n            }\n        })\n\n        let bestMeld = this.possibleMelds[highestEfficiencyIndex]\n        return bestMeld\n    }\n\n    checkHandForSets(max=3) {\n        this.possibleMelds = []\n        let sortedHand = [...this.hand]\n\n        let hearts = sortedHand.filter(card => card.suit == 'hearts')\n        let diamonds = sortedHand.filter(card => card.suit == 'diamonds')\n        let clubs = sortedHand.filter(card => card.suit == 'clubs')\n        let spades = sortedHand.filter(card => card.suit == 'spades')\n\n        hearts.sort((card1, card2) => card1.value - card2.value)\n        diamonds.sort((card1, card2) => card1.value - card2.value)\n        clubs.sort((card1, card2) => card1.value - card2.value)\n        spades.sort((card1, card2) => card1.value - card2.value)\n\n        sortedHand = [...hearts, ...diamonds, ...clubs, ...spades]\n\n        for (let i=1; i<14; i++) {\n            let tmpMeld = []\n            let j = 0\n            this.hand.map(card => {\n                if (card.value == i) {\n                    tmpMeld.push(card)\n                    j++\n                }\n            })\n            if (j>=max) {\n                this.possibleMelds.push(tmpMeld)\n            }\n        }\n\n        let j = 0\n        let tmpMeld = []\n        sortedHand.map((card, index, cards) => {\n            if (index != sortedHand.length-1) {\n                let nextCard = cards[index+1]\n                if (nextCard.value == card.value + 1 && nextCard.suit == card.suit) {\n                    j++\n                    tmpMeld.push(card)\n                    if (index == sortedHand.length-2 && j>=3) {\n                        tmpMeld.push(nextCard)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                } else {\n                    if (j>=max) {\n                        tmpMeld.push(card)\n                        if (tmpMeld.length > 0) {\n                            this.possibleMelds.push(tmpMeld)\n                        }\n                    }\n                    j = 0\n                    tmpMeld = []\n                }\n            }\n\n        })\n    }\n\n    filterMelds() {\n        let bestMeld = this.highestValueMeld()\n        this.bestMelds.push(bestMeld)\n\n        let possibleMeldsTmp = [...this.possibleMelds]\n        possibleMeldsTmp.map((meld, index) => {\n            bestMeld.map(card => {\n                if(meld.includes(card)) {\n                    possibleMeldsTmp.splice(index, 1)\n                }\n            })\n        })\n\n        this.possibleMelds = possibleMeldsTmp\n    }\n\n    getMelds() {\n        this.bestMelds = []\n        this.checkHandForSets()\n        while (this.possibleMelds.length > 0) {\n            this.filterMelds()\n        }\n    }\n\n    calcDeadwood() {\n        this.getMelds()\n        let value = 0\n\n        this.hand.map(card => {\n            let isCardInMeld = false\n            this.bestMelds.map(meld => {\n                if (meld.includes(card)) {\n                    isCardInMeld = true\n                }\n            })\n            if (!isCardInMeld) {\n                value+= card.value<11 ? card.value : 10\n            }\n        })\n\n        return value\n    }\n\n    endRound() {\n        alert('end')\n    }\n\n\n    arrDiff(a1, a2) {\n\n        var a = [], diff = [];\n    \n        for (var i = 0; i < a1.length; i++) {\n            a[a1[i]] = true;\n        }\n    \n        for (var i = 0; i < a2.length; i++) {\n            if (a[a2[i]]) {\n                delete a[a2[i]];\n            } else {\n                a[a2[i]] = true;\n            }\n        }\n    \n        for (var k in a) {\n            diff.push(k);\n        }\n    \n        return diff;\n    }\n\n    opponentTurn() {\n        console.log('deck (player)', this.deck)\n        this.getMelds()\n\n        if (this.calcDeadwood() == 0) {\n            this.endRound()\n        } else {\n            this.checkHandForSets(2)\n\n            let discardLength, deckLength = 0\n\n            // discard pile\n            let previousHandState = [...this.hand]\n            let discardCard = this.discardPile[0]\n            this.hand.push(discardCard)\n            let tmpPile = [...this.discardPile]\n            tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n            this.getMelds()\n            discardLength = this.possibleMelds.length\n            console.log('discard', this.possibleMelds.length)\n            this.hand = [...previousHandState]\n\n            // deck pile\n            let deckCard = this.deck[0]\n            this.hand.push(deckCard)\n            let tmpPile2 = [...this.deck]\n            tmpPile2.splice(tmpPile.indexOf(deckCard), 1)\n            this.getMelds()\n            deckLength = this.possibleMelds.length\n            console.log('deck', this.possibleMelds.length)\n            this.hand = [...previousHandState]\n\n            if (discardLength > deckLength) {\n                let discardCard = this.discardPile[0]\n                this.hand.push(discardCard)\n                let tmpPile = [...this.discardPile]\n                tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                this.discardPile = [...tmpPile]\n            } else if (deckLength > discardLength) {\n                let deckCard = this.deck[0]\n                this.hand.push(deckCard)\n                let tmpPile2 = [...this.deck]\n                tmpPile2.splice(tmpPile.indexOf(deckCard), 1)\n                this.deck = [...tmpPile2]\n            } else {\n                //same\n                if (this.deck[0].value > this.discardPile[0].value) {\n                    let discardCard = this.discardPile[0]\n                    this.hand.push(discardCard)\n                    let tmpPile = [...this.discardPile]\n                    tmpPile.splice(tmpPile.indexOf(discardCard), 1)\n                    this.discardPile = [...tmpPile]\n                } else {\n                    let deckCard = this.deck[0]\n                    this.hand.push(deckCard)\n                    let tmpPile2 = [...this.deck]\n                    tmpPile2.splice(tmpPile.indexOf(deckCard), 1)\n                    this.deck = [...tmpPile2]\n                }\n            }\n\n            this.getMelds()\n            let deadwood = [...this.hand].filter(card => !this.possibleMelds.flat().includes(card))\n            let highestVal = 0\n            let highestValCard\n            deadwood.forEach(card => {\n                if (card.value > highestVal) {\n                    highestVal = card.value\n                    highestValCard = card\n                }\n            })\n\n            let cardToDiscardIndex\n            let cardToDiscard\n            this.hand.forEach((card, index) => {\n                if (card.value == highestValCard.value && card.suit == highestValCard.suit) {\n                    cardToDiscardIndex = index\n                    cardToDiscard = card\n                }\n            })\n\n            this.discardPile.unshift(cardToDiscard)\n            this.hand.splice(cardToDiscardIndex, 1)\n\n        }\n        \n        return 'draw'\n    }\n}\n\nexport default Player","import React, {useEffect, useState, useContext} from 'react'\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/lobby.css'\n\nlet players = []\n\nconst Lobby = () => {\n\n    const {playerName, setPlayerName, isFindingGame, setIsFindingGame} = useContext(GameContext)\n\n    const findGame = e => {\n        e.preventDefault()\n        setPlayerName(playerName)\n        setIsFindingGame(true)\n\n        const sleepInterval = Math.floor(Math.random() * 1)*1000\n        setTimeout(() => {\n            window.location = '/#/play'\n        }, sleepInterval)\n    }\n\n    return (\n        <div className=\"Lobby\">\n            <h1>Online Gin-Rummy</h1>\n\n            \n            {isFindingGame ? (\n                <h2 className=\"loading\">Searching...</h2>\n            ) : (\n                <form onSubmit={e => findGame(e)} className=\"nameForm\">\n                    <label htmlFor=\"name\">Enter your name</label>\n                    <input type=\"text\" name=\"name\" id=\"nameField\" placeholder=\"Name\" value={playerName} onChange={e => {setPlayerName(e.target.value)}}/>\n                    <input type=\"submit\" value=\"Find Game\"/>\n                </form>\n            )}\n\n        </div>\n    )\n}\n\nexport default Lobby","import React, {useEffect, useState, useContext} from 'react'\nimport { createRenderer } from 'react-dom/test-utils'\nimport GameContext from '../context/GameContext'\nimport CardComponent from '../componentes/CardComponent'\nimport { Card, suits } from '../componentes/cards'\nimport Player from '../componentes/players'\nimport '../style/home.css'\nimport Lobby from './Lobby'\n\nlet players = []\n\nconst Home = () => {\n    const [deck, setDeck] = useState([])\n    const [discardPile, setDiscardPile] = useState([])\n    const [hasDealt, setHasDealt] = useState(false)\n    const {gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName} = useContext(GameContext)\n    \n    const [currentCard, setCurrentCard] = useState()\n\n    const setGameState = state => {\n        setPrevGameState(gameState)\n        _setGameState(state)\n    }\n\n    const generateDeck = () => {\n        let cards = []\n        Object.keys(suits).map(suit => {\n            for (let value=1; value<14; value++) {\n                let newCard = new Card(suit, value)\n                cards.push(newCard)\n            }\n        })\n        setDeck(cards)\n    }\n\n    const createPlayers = () => {\n        players = [\n            new Player('Player 1'),\n            new Player('Player 2')\n        ]\n    }\n\n    const deal = () => {\n        let otherTmpDeck = [...deck]\n\n        for (let i=0; i<20; i++) {\n            let tmpDeck = [...otherTmpDeck]\n            let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            while (cardIndex == -1) {\n                cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n            }\n            let card = tmpDeck[cardIndex]\n            players[(i%2)].hand.push(card)\n            tmpDeck.splice(cardIndex, 1)\n            otherTmpDeck = [...tmpDeck]\n        }\n\n        setDeck(otherTmpDeck.sort(() => .5 - Math.random()))\n\n        let tmpDeck = [...otherTmpDeck]\n        let cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n        while (cardIndex == -1) {\n            cardIndex = Math.floor(Math.random() * tmpDeck.length-1)\n        }\n        setDiscardPile([tmpDeck[cardIndex]])\n        tmpDeck.splice(cardIndex, 1)\n        otherTmpDeck = [...tmpDeck]\n\n        setGameState('draw')\n    }\n\n    useEffect(() => {\n        generateDeck()\n        createPlayers()\n        // deal()\n    }, [])\n\n\n    useEffect(() => {\n        // let i = 0\n        // while (gameState == 'opponent' && i<2) {\n        //     setTimeout(console.log('opponent'), 1000)\n        //     i++\n        // }\n\n        if (prevGameState == 'opponent') {\n            setDeck([...players[1].deck])\n            setDiscardPile([...players[1].discardPile])\n        }\n\n        if (gameState == 'opponent') {\n            setTimeout(() => {\n                setGameState(\n                    players[1].opponentTurn()\n                )\n            }, 1000)\n        }\n    }, [gameState])\n\n    // useEffect(() => {\n    //     console.log('rerender')\n    // }, [deck])\n\n    useEffect(() => {\n        players.forEach(player => {\n            player.discardPile = [...discardPile]\n            player.deck = [...deck]\n        })\n    }, [discardPile, deck])\n\n    return (\n        <GameContext.Provider value={{discardPile, setDiscardPile, deck, setDeck, userPlayer: players[0], gameState, setGameState, players, currentCard, setCurrentCard}}>\n            <div className=\"Home\">\n                {!hasDealt && (\n                    <button onClick={e => {\n                        e.preventDefault()\n                        setHasDealt(true)\n                        deal()\n                    }}>Deal</button>\n                )}\n\n                <h2>Name: {playerName || \"null\"}; {gameState || 'null'}, deadwood: {players[0] && players[0].calcDeadwood()}</h2>\n\n                <div className=\"cardList\">\n                    {players[1] && players[1].hand.map((card, key) => (\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        <CardComponent card={card} isFaceUp={false} player={players[1]} pile={{name: 'opponentHand', ref: players[1].hand}}/>\n                    ))}\n                </div>\n\n                <br/>\n                \n                <div className={`middleDeck ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n\n                    <div className=\"cardWrapper\">\n                        <img className=\"Card\" src=\"/card-images/knock.png\" alt=\"knock\"/>\n                        {/* <CardComponent card={deck[0]} isFaceUp={false} player={null} isKnock={true}/> */}\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        <CardComponent card={deck[0]} isFaceUp={false} player={null} pile={{name: 'deck', ref: deck}}/>\n                    </div>\n\n                    <div className=\"cardWrapper\">\n                        {\n                            discardPile.length > 0\n                                ? (<CardComponent card={discardPile[0]} isFaceUp={true} player={null} pile={{name: 'discard', ref: discardPile}}/>)\n                                : <CardComponent card={deck[0]} isFaceUp={true} player={null} pile={{name: 'discard', ref: deck[0]}}/>\n                        }\n                    </div>\n                </div>\n\n                <br/>\n\n                <div className={`cardList ${gameState=='opponent' ? 'greyedOut' : ''}`}>\n                    {players[0] && players[0].hand.map((card, key) => (\n                        // <li key={key}>{card.value == 1 ? 'ACE' : card.value}, {card.suit}</li>\n                        <CardComponent card={card} isFaceUp={true} player={players[0]} pile={{name: 'hand', ref: players[0].hand}}/>\n                    ))}\n                </div>\n\n            </div>\n        </GameContext.Provider>\n    )\n}\n\nexport default Home","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, useContext, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './style/index.css';\nimport Header from './componentes/Header'\nimport Home from './pages/Home'\nimport Lobby from './pages/Lobby'\nimport GameContext from './context/GameContext'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst App = () => {\n  \n  const [gameState, _setGameState] = useState(null)\n  const [prevGameState, setPrevGameState] = useState('')\n  const [playerName, setPlayerName] = useState('Player 1')\n  const [isFindingGame, setIsFindingGame] = useState(false)\n  \n  return (\n    <GameContext.Provider value={{gameState, _setGameState, prevGameState, setPrevGameState, playerName, setPlayerName, isFindingGame, setIsFindingGame}}>\n      <Router>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Lobby/>\n              </Route>\n              <Route exact path=\"/play\">\n                <Home/>\n              </Route>\n            </Switch>\n          </div>\n      </Router>\n    </GameContext.Provider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}